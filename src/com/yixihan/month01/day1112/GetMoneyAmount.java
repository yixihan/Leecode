package com.yixihan.month01.day1112;

import org.junit.jupiter.api.Test;

/**
 * 我们正在玩一个猜数游戏，游戏规则如下：
 *
 * 我从 1 到 n 之间选择一个数字，你来猜我选了哪个数字。
 *
 * 每次你猜错了，我都会告诉你，我选的数字比你的大了或者小了。
 *
 * 然而，当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。直到你猜到我选的数字，你才算赢得了这个游戏。
 *
 * 给定 n ≥ 1，计算你至少需要拥有多少现金才能确保你能赢得这个游戏。
 *
 * n = 10, 我选择了8.
 *
 * 第一轮: 你猜我选择的数字是5，我会告诉你，我的数字更大一些，然后你需要支付5块。
 * 第二轮: 你猜是7，我告诉你，我的数字更大一些，你支付7块。
 * 第三轮: 你猜是9，我告诉你，我的数字更小一些，你支付9块。
 *
 * 游戏结束。8 就是我选的数字。
 *
 * 你最终要支付 5 + 7 + 9 = 21 块钱。
 *
 *
 * @author : yixihan
 * @create : 2021-11-12-8:22
 */
public class GetMoneyAmount {

    int[][] dp;

    /**
     * 动态规划
     */
    public int getMoneyAmount(int n) {

        dp = new int[n + 1][n + 1];

        for (int i = 0; i <= n; ++i) {
            for (int j = 0; j <= n; ++j) {
                dp[i][j] = -1;
            }
        }

        return guess(1, n);
    }


    int guess (int start, int end) {

        if (start > end) {
            return 0;
        } else if (dp[start][end] >= 0) {
            return dp[start][end];
        } else if (start == end) {
            return dp[start][end] = 0;
        }

        int min = -1;
        for (int mid = start; mid <= end; ++mid) {

            int pay = mid + Math.max(guess(start, mid - 1), guess(mid + 1, end));

            if (min == -1 || pay < min) {
                min = pay;
            }
        }

        return dp[start][end] = min;
    }


    /**
     * 打表法
     */
    public int getMoneyAmount1 (int n ) {
        int[] ans = new int[]{0,0,1,2,4,6,8,10,12,14,16,18,21,24,27,30,34,38,42,46,49,52,55,58,61,64,67,70,73,76,79,82,86,90,94,98,102,106,110,114,119,124,129,134,139,144,149,154,160,166,172,178,182,186,190,194,198,202,206,210,214,218,222,226,230,234,238,242,246,250,254,258,262,266,270,274,278,282,286,290,295,300,305,310,315,320,325,330,335,340,345,350,355,360,365,370,376,382,388,394,400,406,412,418,424,430,436,442,448,454,460,466,473,480,487,494,501,508,515,522,529,536,543,550,555,560,565,570,575,580,585,590,595,600,605,610,615,620,625,630,635,640,645,650,655,660,666,674,680,686,692,698,703,708,713,718,723,728,733,738,743,748,753,758,763,768,773,778,783,788,793,798,803,808,813,818,823,828,833,838,843,848,853,858,863,868,873,878,883,888,893,898,904,910,916,922,928,934,940,946,952};
        return ans[n];
    }


    @Test
    public void test () {
        System.out.println(getMoneyAmount(10));
    }
}
